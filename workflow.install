<?php
// $Id: workflow.install,v 1.13.2.3.2.2 2010/08/30 14:45:49 q0rban Exp $

/**
 * Implementation of hook_install().
 */
function workflow_install() {
  drupal_install_schema('workflow');
}

/**
 * Implementation of hook_uninstall().
 */
function workflow_uninstall() {
  variable_del('workflow_states_per_page');
  // Delete type-workflow mapping variables.
  foreach (node_get_types() as $type => $name) {
    variable_del('workflow_'. $type);
  }
  drupal_uninstall_schema('workflow');
  
  cache_clear_all('workflows', 'cache');
}

/**
 * Implementation of hook_schema().
 */
function workflow_schema() {
  $schema['workflows'] = array(
    'export' => array(
      'key' => 'name',
      'key name' => 'Machine Name',
      'object' => 'workflow',
      'load all callback' => 'workflow_load_all_callback',
      'export callback' => 'workflow_export_callback',
      'create callback' => 'workflow_export_crud_new',
      'load callback' => 'workflow_export_crud_load',
      'save callback' => 'workflow_export_crud_save',
      'delete callback' => 'workflow_export_crud_delete',
      
      'can disable' => FALSE,
      'identifier' => 'workflow',
      'api' => array(
        'owner' => 'workflow',
        'api' => 'workflow',
        'minimum_version' => 1,
        'current_version' => 1,
      )      
    ),
    'fields' => array(
      'wid'          => array('type' => 'serial', 'not null' => TRUE, 'no export' => TRUE),
      'name'         => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'label'        => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'tab_roles'    => array('type' => 'varchar', 'length' => '60', 'not null' => TRUE, 'default' => ''),
      'options'      => array('type' => 'text', 'size' => 'big', 'not null' => FALSE, 'serialize' => TRUE)),
    'primary key'    => array('wid'),
    'unique keys'    => array('name' => array('name')),    
    'indexes' => array('op_workflows_name' => array('name')),        
  );
  $schema['workflow_type_map'] = array(
    'export' => array(
      'key' => 'node_type',
      'object' => 'workflow_type_map',
      'load all callback' => 'workflow_type_map_load_all_callback',      
      'can disable' => FALSE,
      'identifier' => 'workflow_type_map',
      'api' => array(
        'owner' => 'workflow',
        'api' => 'workflow',
        'minimum_version' => 1,
        'current_version' => 1,
      )      
    ),  
    'fields' => array(
      'node_type'     => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'workflow_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '')),
    'primary key'    => array('node_type'),      
    'indexes' => array(
      'node_type'          => array('node_type'),
      'workflow_name' => array('workflow_name')),
  );
  $schema['workflow_transitions'] = array(
    'export' => array(
      'can disable' => FALSE,
      'identifier' => 'workflow_transition',
      //-- Allow states to be auto-loaded as part of workflow, but not independently
      'bulk export' => FALSE,
    ),  
    'fields' => array(
      'tid'               => array('type' => 'serial', 'not null' => TRUE, 'no export' => TRUE),
      'state_name'        => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'target_state_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'roles'             => array('type' => 'varchar', 'length' => '255', 'not null' => FALSE)),
    'primary key'         => array('tid'),
    'indexes' => array(
      'state_name'        => array('state_name'),
      'target_state_name' => array('target_state_name')),
  );
  $schema['workflow_states'] = array(
    'export' => array(
      'can disable' => FALSE,
      'identifier' => 'workflow_state',
      //-- Allow states to be auto-loaded as part of workflow, but not independently
      'bulk export' => FALSE,
    ),
    'fields' => array(
      'sid'           => array('type' => 'serial', 'not null' => TRUE, 'no export' => TRUE),
      'name'          => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'workflow_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'label'         => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      //-- Tinyints are interpreted as booleans by CTools. To avoid that we need custom exporter (or we'd have to change field type).
      'weight'        => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'disp-width' => '4', 
                               'export callback' => 'workflow_state_weight_exporter'),
      'sysid'         => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 0, 'disp-width' => '4'),
      'status'        => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE, 'default' => 1, 'disp-width' => '4')),
    'primary key'     => array('sid'),
    'unique keys'     => array('name' => array('name')),
    'indexes' => array(
      'sysid'         => array('sysid'),
      'workflow_name' => array('workflow_name')),
  );
  $schema['workflow_scheduled_transition'] = array(
    'fields' => array(
      'nid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'old_state_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'state_name'     => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'scheduled'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'comment'        => array('type' => 'text', 'size' => 'big', 'not null' => FALSE)),
    'indexes' => array(
      'nid' => array('nid')),
  );
  $schema['workflow_node_history'] = array(
    'fields' => array(
      'hid'            => array('type' => 'serial', 'not null' => TRUE),
      'nid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'old_state_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'state_name'     => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'uid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'stamp'          => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'comment'        => array('type' => 'text', 'size' => 'big', 'not null' => FALSE)),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid', 'state_name')),
  );
  $schema['workflow_node'] = array(
    'fields' => array(
      'nid'        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'state_name' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => ''),
      'uid'        => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '10'),
      'stamp'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'disp-width' => '11')),
    'primary key'  => array('nid'),
    'indexes' => array(
      'nid'        => array('nid', 'state_name')),
  );

  return $schema;
}


// Introduce workflow_node_history table so workflow_node is joinable for views.module.
function workflow_update_1() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      // Create new workflow_node_history table.
      $ret[] = update_sql("CREATE TABLE {workflow_node_history} (
        nid int(10) unsigned NOT NULL default '0',
        sid int(10) unsigned NOT NULL default '0',
        uid int(10) unsigned NOT NULL default '0',
        stamp int(10) unsigned NOT NULL default '0',
        KEY nid (nid,sid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");

      // Copy data from the current workflow_node table.
      $ret[] = update_sql("INSERT INTO {workflow_node_history} SELECT * FROM {workflow_node}");

      // Delete older entries.
      $result = db_query("SELECT w1.* FROM {workflow_node} w1 LEFT JOIN {workflow_node} AS w2 ON w1.nid = w2.nid AND w1.start < w2.start WHERE w2.start is NULL");
      while ($record = db_fetch_array($result)) {
        db_query("DELETE FROM {workflow_node} WHERE nid = %d", $record['nid']);
        db_query("INSERT INTO {workflow_node} (nid, sid, uid) VALUES (%d, %d, %d)", $record['nid'], $record['sid'], $record['uid']);
      }

      $ret[] = update_sql("ALTER TABLE {workflow_node} DROP PRIMARY KEY");
      $ret[] = update_sql("ALTER TABLE {workflow_node} DROP start");

      // We can now use a unique primary key.
      $ret[] = update_sql("ALTER TABLE {workflow_node} ADD PRIMARY KEY (nid)");
      break;

    case 'pgsql':
      // Create new workflow_node_history table.
      $ret[] = update_sql("CREATE TABLE {workflow_node_history} (
        nid integer NOT NULL default '0',
        sid integer NOT NULL default '0',
        uid integer NOT NULL default '0',
        stamp integer NOT NULL default '0'
      );");
      $ret[] = update_sql("CREATE INDEX {workflow_node_history}_nid_sid_idx ON {workflow_node_history}(nid,sid);");

      // Copy data from the current workflow_node table.
      $ret[] = update_sql("INSERT INTO {workflow_node_history} SELECT * FROM {workflow_node}");

      // Delete older entries.
      $result = db_query("SELECT w1.* FROM {workflow_node} w1 LEFT JOIN {workflow_node} AS w2 ON w1.nid = w2.nid AND w1.start < w2.start WHERE w2.start is NULL");
      while ($record = db_fetch_array($result)) {
        db_query("DELETE FROM {workflow_node} WHERE nid = %d", $record['nid']);
        db_query("INSERT INTO {workflow_node} (nid, sid, uid) VALUES (%d, %d, %d)", $record['nid'], $record['sid'], $record['uid']);
      }

      $ret[] = update_sql("ALTER TABLE {workflow_node} DROP CONSTRAINT {workflow_node}_pkey");
      $ret[] = update_sql("ALTER TABLE {workflow_node} DROP start");

      // We can now use a unique primary key.
      $ret[] = update_sql("ALTER TABLE {workflow_node} ADD PRIMARY KEY (nid)");
      break;
  }

  return $ret;
}

// Make all tables UTF-8 compatible, workflow_node_history covered above.
function workflow_update_2() {
  return _system_update_utf8(array('workflow_actions', 'workflow_node', 'workflow_states', 'workflow_transitions', 'workflow_type_map', 'workflows'));
}

// Keep record of old states and comment history.
function workflow_update_3() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {workflow_node_history} ADD old_sid int(10) unsigned NOT NULL AFTER nid");
      $ret[] = update_sql("ALTER TABLE {workflow_node_history} ADD comment longtext");
      $ret[] = update_sql("ALTER TABLE {workflows} ADD tab_roles varchar(60) NOT NULL");
      break;

    case 'pgsql':
      db_add_column($ret, 'workflow_node_history', 'old_sid', 'integer', array('default' => 0, 'not null' => TRUE));
      db_add_column($ret, 'workflow_node_history', 'comment', 'text', array('default' => '', 'not null' => TRUE));
      db_add_column($ret, 'workflows', 'tab_roles', 'varchar(60)', array('default' => '', 'not null' => TRUE));
      break;
  }

  return $ret;
}

// Update sequence names to be cross-database compatible.
function workflow_update_4() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      db_query('LOCK TABLES {sequences} WRITE');
      $ret[] = _workflow_fix_seq('workflows', '{workflows}_wid');
      $ret[] = _workflow_fix_seq('workflow_state', '{workflow_states}_sid');
      $ret[] = _workflow_fix_seq('workflow_transitions', '{workflow_transitions}_tid');
      db_query('UNLOCK TABLES');
      break;
  }

  return $ret;
}

// Add stamp column in workflow_node to ease JOIN with history table. Needed for Views.
function workflow_update_5() {
   $ret[] = update_sql("ALTER TABLE {workflow_node} ADD stamp int(10) unsigned AFTER uid");
   $sql = "SELECT MAX(stamp) AS stamp, nid FROM {workflow_node_history} GROUP BY nid";
   $result = db_query($sql);
   while ($row = db_fetch_object($result)) {
     $ret[] = update_sql("UPDATE {workflow_node} SET stamp = $row->stamp WHERE nid = $row->nid");
   }
   return $ret;
}

// Helper function to fix sequence table names.
function _workflow_fix_seq($old_name, $new_name) {
  $new_name = db_prefix_tables($new_name);
  return update_sql("UPDATE {sequences} SET name = '" . $new_name . "' WHERE name = '" . $old_name . "'");
}

// Add scheduling tables
function workflow_update_6() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
        $ret[] = update_sql(
<<<QUERY
CREATE TABLE {workflow_scheduled_transition} (
  nid int(10) unsigned NOT NULL default '0',
  old_sid int(10) unsigned NOT NULL default '0',
  sid int(10) unsigned NOT NULL default '0',
  scheduled int(10) unsigned NOT NULL default '0',
  comment longtext,
  KEY nid (nid)
) /*!40100 DEFAULT CHARACTER SET utf8 */;
QUERY
      );
      break;
    case 'pgsql':
      $ret[] = update_sql(
<<<QUERY
CREATE TABLE {workflow_scheduled_transition} (
  nid integer NOT NULL default '0',
  old_sid integer NOT NULL default '0',
  sid integer NOT NULL default '0',
  scheduled integer NOT NULL default '0',
  comment text
);
QUERY
      );
      $ret[] = update_sql(
<<<QUERY
CREATE INDEX {workflow_scheduled_transition}_nid_idx ON {workflow_scheduled_transition}(nid);
QUERY
      );

     break;
  }

  return $ret;
}

// We no longer keep track of workflow actions separately in our own table.
function workflow_update_5200() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
    case 'pgsql':
      // Move workflow action assignments to the actions_assignments table.
      if (module_exists('actions')) {
        $result = db_query("SELECT * FROM {workflow_actions}");
        if ($result) {
          $success = FALSE;
          while ($data = db_fetch_object($result)) {
            $success = db_query("INSERT INTO {actions_assignments} (hook, op, aid, weight) VALUES ('%s', '%s', '%s', %d)", 'workflow', 'workflow-'. $data->tid, $data->aid, $data->weight);
          }
        }
        else {
          // workflow_actions had no records; it can be safely dropped.
          $success = TRUE;
        }

        // The workflow_actions table is no longer needed.
        if ($success) {
          $ret[] = update_sql("DROP TABLE {workflow_actions}");
        }
      }
  }
  return $ret;
}

// Add a field to track workflow history entry order.
function workflow_update_5201() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {workflow_node_history} ADD hid INT NOT NULL AUTO_INCREMENT PRIMARY KEY");
      break;

    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {workflow_node_history} ADD hid SERIAL");
      break;
  }
  return $ret;
}

// Add status field to workflow states table so that deleted states can simply
// be marked deleted without actually being removed (that way they still show up
// in workflow history for a node).
function workflow_update_5202() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {workflow_states} ADD status TINYINT NOT NULL DEFAULT '1'");
      break;

    case 'pgsql':
      $ret[] = update_sql("ALTER TABLE {workflow_states} ADD status SMALLINT NOT NULL DEFAULT '1'");
      break;
  }
  return $ret;
}

// We now require that a transition include both a descriptor and a target state instead
// of just a target state. So ops are changing from 'workflow-35' to 'workflow-page-35'.
function workflow_update_5203() {
  $ret = array();
  if (module_exists('actions')) {
    $result = db_query("SELECT hook, op, aid, weight FROM {actions_assignments} WHERE hook = 'workflow'");
    while ($data = db_fetch_object($result)) {
      $op_parts = explode('-', $data->op);
      // The ops we have to update have only two parts, e.g., workflow-35.
      if (count($op_parts) == 3) {
        continue;
      }
      $tid = $op_parts[1];
      // Assign a type to this hook.
      $wid = db_result(db_query("SELECT ws.wid FROM {workflow_states} ws LEFT JOIN {workflow_transitions} wt ON ws.sid = wt.sid WHERE wt.tid = %d", $tid));
      // Get the first node type associated with this hook (if there are multiple types,
      // we can't decide between them so we take the first one).
      $type = db_result(db_query("SELECT type FROM {workflow_type_map} WHERE wid = %d LIMIT 1", $wid));
      $new_op = 'workflow-'. $type .'-'. $tid;
      $query_result = db_query("UPDATE {actions_assignments} SET op = '%s' WHERE hook = 'workflow' AND op = '%s' AND aid = '%s' AND weight = %d", $new_op, $data->op, $data->aid, $data->weight);
      $ret[] = array('success' => $query_result !== FALSE, 'query' => check_plain('op '. $data->op .' => '. $new_op));
    }
  }
  return $ret;
}

// The workflow_transitions field was too small, resulting in truncation with many roles.
function workflow_update_5204() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql("ALTER TABLE {workflow_transitions} CHANGE roles roles VARCHAR(255) NULL DEFAULT NULL");
      break;
    case 'pgsql':
      $ret[] = update_sql("BEGIN;
        ALTER TABLE {workflow_transitions} ADD COLUMN roles_temp VARCHAR(255);
        UPDATE roles_temp SET new_col = CAST(roles AS VARCHAR(255));
        ALTER TABLE {actions_assignments} DROP COLUMN roles;
        RENAME roles_temp TO roles;
        COMMIT;");
      break;
  }
  return $ret;
}

// Add a general data field for storing workflow options.
function workflow_update_6100() {
  $ret = array();
  db_add_field($ret, 'workflows', 'options', array('type' => 'text', 'size' => 'big', 'not null' => FALSE));
  // Seed existing workflows with the behavior of showing the comment field.
  $default = serialize(array('comment_log_node' => 1, 'comment_log_tab' => 1));
  $query_result = db_query("UPDATE {workflows} SET options = '%s'", $default);
  $ret[] = array('success' => $query_result !== FALSE, 'query' => "UPDATE {workflows} SET options = '$default'");
  return $ret;
}

// Tables upgraded from 5.x needs AUTOINCREMENT set.
function workflow_update_6101() {
  $ret = array();
  $workflows = $workflow_states = $workflow_transitions = FALSE;
  // Test to see if the autoincrement attribute is present.
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $workflows = db_result(db_query("SHOW COLUMNS FROM {workflows} WHERE field = 'wid' and extra REGEXP 'auto_increment'"));
      $workflow_states = db_result(db_query("SHOW COLUMNS FROM {workflow_states} WHERE field = 'sid' and extra REGEXP 'auto_increment'"));
      $workflow_transitions = db_result(db_query("SHOW COLUMNS FROM {workflow_transitions} WHERE field = 'tid' and extra REGEXP 'auto_increment'"));
      break;
    case 'pgsql':
      // Not sure how determine if a PostgreSQL field has a sequence.
      break;
  }
  if ($workflows === FALSE) {
    db_drop_primary_key($ret, 'workflows');
    db_change_field($ret, 'workflows', 'wid', 'wid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('wid')));
  }
  if ($workflow_states === FALSE) {
    db_drop_primary_key($ret, 'workflow_states');
    db_change_field($ret, 'workflow_states', 'sid', 'sid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('sid')));
  }
  if ($workflow_transitions === FALSE) {
    db_drop_primary_key($ret, 'workflow_transitions');
    db_change_field($ret, 'workflow_transitions', 'tid', 'tid', array('type' => 'serial', 'not null' => TRUE), array('primary key' => array('tid')));
  }
  return $ret;
}

/**
 * Update Workflow to use machine names
 */
function workflow_update_6200() {
  $ret = array();
  $schema = _workflow_update_6200_schema();

  _workflow_update_6200($ret, $schema);

  return $ret;
}

/**
 * Helper function to the 6200 update. workflow_access needs this functionality 
 * as well, so it stands alone from the update function.
 */
function _workflow_update_6200(&$ret, $schema) {
  // Rename existing fields and add new ones as needed.
  foreach ($schema as $table => $table_schema) {
    if (!empty($table_schema['changed fields'])) {
      foreach ($table_schema['changed fields'] as $args) {
        db_change_field($ret, $table, $args['field'], $args['field_new'], $args['spec']);
      }
    }

    if (!empty($table_schema['fields'])) {
      // Add new fields to appropriate tables.
      foreach ($table_schema['fields'] as $name => $field) {
        db_add_field($ret, $table, $name, $field);
      }
    }
  }
}

/**
 * Set up machine names on existing workflows. We do this in a separate update
 * so we can do them in batches of 100 via $sandbox.
 */
function workflow_update_6201(&$sandbox = NULL) {
  $ret = array();
  $schema = _workflow_update_6200_schema();

  // We use $sandbox here to do these in batches of 100.
  if (!isset($sandbox['max_wid'])) {
    $sandbox['current_wid'] = 0;
    $sandbox['max_wid'] = db_result(db_query('SELECT MAX(wid) FROM {workflows}'));
  }

  $result = db_query("SELECT * FROM {workflows} WHERE wid > %d ORDER BY wid ASC LIMIT 100", $sandbox['current_wid']);
  while ($obj = db_fetch_object($result)) {
    // First we'll create a new machine name for existing workflows.
    $name = _workflow_update_6200_name_gen($obj->label, $obj->wid);
    $sql = "UPDATE {workflows} SET name = '%s' WHERE wid = %d";
    $success = db_query($sql, $name, $obj->wid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow type map with the new workflow name.
    $sql = "UPDATE {workflow_type_map} SET workflow_name = '%s' WHERE wid = %d";
    $success = db_query($sql, $name, $obj->wid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow states with the new workflow name.
    $sql = "UPDATE {workflow_states} SET workflow_name = '%s' WHERE wid = %d";
    $success = db_query($sql, $name, $obj->wid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    $sandbox['current_wid'] = $obj->wid;
  }

  $ret['#finished'] = empty($sandbox['max_wid']) ? 1 : ($sandbox['current_wid'] / $sandbox['max_wid']);

  return $ret;
}

/**
 * Set up machine names on existing workflows states. Again, in a separate update
 * so we can do them in batches of 100 via $sandbox.
 */
function workflow_update_6202(&$sandbox = NULL) {
  $ret = array();
  $schema = _workflow_update_6200_schema();

  // We use $sandbox here to do these in batches of 100.
  if (!isset($sandbox['max_sid'])) {
    $sandbox['current_sid'] = 0;
    $sandbox['max_sid'] = db_result(db_query('SELECT MAX(sid) FROM {workflow_states}'));
  }

  $result = db_query("SELECT * FROM {workflow_states} WHERE sid > %d ORDER BY sid ASC LIMIT 100", $sandbox['current_sid']);
  while ($obj = db_fetch_object($result)) {
    // Create a new machine name for existing states.
    if ($obj->label == t('(creation)')) {
      $name = _workflow_creation_state($obj->workflow_name);
    }
    else {
      $name = _workflow_update_6200_name_gen($obj->label, $obj->sid);
    }
    $sql = "UPDATE {workflow_states} SET name = '%s' WHERE sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow_transitions table. There are two columns to update: 
    // state_name, and target_state_name.
    $sql = "UPDATE {workflow_transitions} SET state_name = '%s' WHERE sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));
    // target_sid to target_state_name
    $sql = "UPDATE {workflow_transitions} SET target_state_name = '%s' WHERE target_sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow_scheduled_transition table. There are two columns to update: 
    // old_state_name, and state_name.
    $sql = "UPDATE {workflow_scheduled_transition} SET state_name = '%s' WHERE sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));
    // target_sid to target_state_name
    $sql = "UPDATE {workflow_scheduled_transition} SET old_state_name = '%s' WHERE old_sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow_node_history table. There are two columns to update: 
    // old_state_name, and state_name.
    $sql = "UPDATE {workflow_node_history} SET state_name = '%s' WHERE sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));
    // target_sid to target_state_name
    $sql = "UPDATE {workflow_node_history} SET old_state_name = '%s' WHERE old_sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    // Update the workflow_node table with a state_name.
    $sql = "UPDATE {workflow_node} SET state_name = '%s' WHERE sid = %d";
    $success = db_query($sql, $name, $obj->sid);
    $ret[] = array('success' => $success !== FALSE, 'query' => check_plain($sql));

    $sandbox['current_sid'] = $obj->sid;
  }

  $ret['#finished'] = empty($sandbox['max_sid']) ? 1 : ($sandbox['current_sid'] / $sandbox['max_sid']);

  return $ret;
}

/**
 * Add/delete unique keys/indexes and drop old fields where necessary based on 
 * the new 6200 schema.
 */
function workflow_update_6203() {
  $ret = array();
  $schema = _workflow_update_6200_schema();

  _workflow_update_6203($ret, $schema);

  return $ret;
}

/**
 * Helper function to the 6203 update. workflow_access needs this functionality 
 * as well, so it stands alone from the update function.
 */
function _workflow_update_6203(&$ret, $schema) {
  // Now that that's done, 
  foreach ($schema as $table => $table_schema) {
    if (!empty($table_schema['deleted indexes'])) {
      // Delete old indexes.
      foreach ($table_schema['deleted indexes'] as $index) {
        db_drop_index($ret, $table, $index);
      }
    }
    if (!empty($table_schema['indexes'])) {
      // Add new indexes to appropriate tables.
      foreach ($table_schema['indexes'] as $name => $fields) {
        db_add_index($ret, $table, $name, $fields);
      }
    }
    if (!empty($table_schema['unique keys'])) {
      // Add new unique keys to appropriate tables.
      foreach ($table_schema['unique keys'] as $name => $fields) {
        db_add_unique_key($ret, $table, $name, $fields);
      }
    }
    if (!empty($table_schema['deleted fields'])) {
      // Delete fields as needed.
      foreach ($table_schema['deleted fields'] as $field) {
        db_drop_field($ret, $table, $field);
      }
    }
  }
}

/**
 * Helper function to set up the 6200 schema changes in an array.
 */
function _workflow_update_6200_schema() {
  // Set up the schema changes in an array.
  // Every name field is the same.
  $name_field = array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '');
  $schema = array();
  $schema['workflows'] = array(
    'changed fields' => array(
      'name' => array(
        'field' => 'name',
        'field_new' => 'label',
        'spec' => $name_field,
      ),
    ),
    'fields' => array('name' => $name_field + array('sql')),
    'unique keys' => array('name' => array('name')),
  );
  $schema['workflow_type_map'] = array(
    'fields' => array('workflow_name' => $name_field),
    'deleted fields' => array('wid'),
    'indexes' => array(
      'type' => array('type'),
      'workflow_name' => array('workflow_name'),
    ),
    'deleted indexes' => array('type'),
  );
  $schema['workflow_transitions'] = array(
    'fields' => array(
      'state_name' => $name_field,
      'target_state_name' => $name_field,
    ),
    'deleted fields' => array('sid', 'target_sid'),
    'indexes' => array(
      'state_name'        => array('state_name'),
      'target_state_name' => array('target_state_name')
    ),
    'deleted indexes' => array('sid', 'target_sid'),
  );
  $schema['workflow_states'] = array(
    'changed fields' => array(
      'state' => array(
        'field' => 'state',
        'field_new' => 'label',
        'spec' => $name_field,
      ),
    ),
    'fields' => array(
      'name' => $name_field,
      'workflow_name' => $name_field,
    ),
    'unique keys' => array('name' => array('name')),
    'deleted fields' => array('wid'),
    'indexes' => array('workflow_name' => array('workflow_name')),
    'deleted indexes' => array('wid'),
  );
  $schema['workflow_scheduled_transition'] = array(
    'fields' => array(
      'old_state_name' => $name_field,
      'state_name' => $name_field,
    ),
    'deleted fields' => array('sid', 'old_sid'),
  );
  $schema['workflow_node_history'] = array(
    'fields' => array(
      'old_state_name' => $name_field,
      'state_name' => $name_field,
    ),
    'deleted fields' => array('sid', 'old_sid'),
    'indexes' => array(
      'nid' => array('nid', 'state_name'),
    ),
    'deleted indexes' => array('nid'),
  );
  $schema['workflow_node'] = array(
    'fields' => array(
      'state_name' => $name_field,
    ),
    'deleted fields' => array('sid'),
    'indexes' => array(
      'nid' => array('nid', 'state_name'),
    ),
    'deleted indexes' => array('nid'),
  );

  return $schema;
}

/**
 * Turn a ascii string into a machine name.
 */
function _workflow_update_6200_name_gen($string, $id) {
  // First let's make it lowercase.
  $output = strtolower($string);
  // Convert spaces to underscores.
  $output = str_replace(' ', '_', $output);
  // Then filter out any silly characters.
  $output = preg_replace("/[^[:alnum:]_]/", '', $output);

  // We add one here to account for the underscore delimiter.
  $length = strlen($output) + strlen($id) + 1;

  // Trim the name down if necessary. This is a HIGHLY unlikely occurence.
  $output = _workflow_update_6200_name_trim($output, $length - 255);

  return $output .'_'. $id;
}

/**
 * If necessary, trim a string down to 255 characters.
 */
function _workflow_update_6200_name_trim($string, $num) {
  // Only trim if $num is positive.
  if ($num > 0) {
    $new_length = strlen($string) - $num;
    $string = substr($string, 0, $new_length);
  }

  return $string;
}